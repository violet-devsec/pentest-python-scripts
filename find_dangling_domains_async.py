import asyncio
import dns.asyncresolver
from termcolor import colored

# Finds all sub-domains, dangling or not
async def is_dangling(domain):
    try:
        resolver = dns.asyncresolver.Resolver()
        answers = await resolver.resolve(domain)
    except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN):
        return True
    else:
        return False

# Finds all sub-domains registered under this DNS record
async def find_cnames_recursive(domain):
    cnames = []
    try:
        resolver = dns.asyncresolver.Resolver()
        answers = await resolver.resolve(domain, 'CNAME')
        for rdata in answers:
            cname = str(rdata.target).rstrip('.')
            cnames.append(cname)
            cnames += await find_cnames_recursive(cname)
    except Exception as e:
        print(f"CNAMEs finding end for {domain}")
    return cnames

async def main():
    domFile = input("Enter the file path: ")
    with open(domFile, "r") as file:
        for domain in file:
            domain = domain.strip()
            print(colored(f">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> {domain} <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", 'blue'))
            cnames = await find_cnames_recursive(domain)
    
            print(f"All CNAME records of {domain} until A record: {cnames}")
            noDangling = True
            if len(cnames) != 0:
                for cname in cnames:
                    if await is_dangling(cname):
                        print(colored(f"Sub-domain {cname} is dangling!!",'red'))
                        noDangling = False

if __name__ == '__main__':
    asyncio.run(main())