import dns.resolver
from termcolor import colored

# Finds all sub-domains dangling or not
def is_dangling(domain):
    try:
        answers = dns.resolver.resolve(domain)
    except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN):
        return True
    else:
        return False
    
# Finds all sub-domain registered under this DNS record    
def find_cnames_recursive(domain):
    cnames = []
    try:
        answers = dns.resolver.resolve(domain, 'CNAME')
        for rdata in answers:
            cname = str(rdata.target).rstrip('.')
            cnames.append(cname)
            cnames += find_cnames_recursive(cname)
            print(f"All CNAME records of {domain} in loop: {cnames}")
    except Exception as e:
        print(f"CNAME find ends.")
    return cnames

if __name__ == '__main__':
    domain = input("Enter the domain name: ")
    cnames = find_cnames_recursive(domain)
    print(f"All CNAME records of {domain} until A record: {cnames}")
    noDangling = True
    if len(cnames) != 0:
        for cname in cnames:
            if is_dangling(cname):
                print(colored(f"Sub-domain {cname} is dangling!!",'red'))
                noDangling = False
                
    if is_dangling(domain):
            print(colored(f"Domain {domain} is dangling!!",'red'))
            noDangling = False
    
    if noDangling:
        print(colored("No dangling domains!!",'green'))